---
title: "Workflow best practices"
author: "Gordon Shotwell & Joe Cheng"
title-slide-attributes: 
  data-background-color: black
  data-background-image:  images/toc-people-dark.svg
  data-background-size: contain
format:
  positconfslides-revealjs: 
    incremental: true
    chalkboard: true
    slide-number: c/t
    code-copy: true
    center-title-slide: false
    code-link: true
    highlight-style: a11y
    width: "1600"
    height: "900"
    filters:
      - positconfslides
---
```{python}
# | echo: false
import os

os.chdir("..")
from helpers import problem_tabs, include_shiny_folder, Quiz, multiple_choice_app

```

## Goals

- Learn some Shiny best practices
- Get a sense of how large complicated apps are structured
- Know when you need to refactor your application

## Avoid premature refactoring

- Start by just getting your app to work
- Take small steps to avoid repetition
- Ultimately you're the one who needs to work with the code

## When should you refactor?
- You're trying to hold too much in your head
- Changing the app is difficult
- Other people don't understand your code
- You don't understand your code!

## Three main techniques
- Use functions to generate UI
- Separate reactive and non-reactive code
- Modules

## We're only going to cover two
::: {.nonincremental}
- Use functions to generate UI
- Separate reactive and non-reactive code
- ~~Modules~~
:::

# UI Functions

## Background on functions
- Functions are the best way to improve code quality
    - Define logic in one place
    - Can define variables within the function scope
    - Handle errors 
    - Tests and typing
    - Easy to use with iterators
- If you're lost just start writing functions

## Data Science blind spot
<br><br>

:::{.large}
Data scientists forget functions when writing Shiny UIs
:::

## UIs are just objects

- Recall that Shiny UIs are just objects
    - They can be stored in variables
    - They can be composed 
    - They can be generated by functions

## Using functions

```{.python}
from shiny import App, render, ui

app_ui = ui.page_fluid(
    ui.input_slider("n1", "N", 0, 100, 20),
    ui.input_slider("n2", "N", 0, 100, 20),
    ui.input_slider("n3", "N", 0, 100, 20),
    ui.input_slider("n4", "N", 0, 100, 20),
    ui.input_slider("n5", "N", 0, 100, 20),
    ui.input_slider("n6", "N", 0, 100, 20),
)

app = App(app_ui, None)
```

## Using functions

```{.python}
from shiny import App, render, ui

def my_slider(id, label):
    return ui.input_slider(id, "N", 0, 100, 20)

app_ui = ui.page_fluid(
    my_slider("n1"),
    my_slider("n2"),
    my_slider("n3"),
    my_slider("n4"),
    my_slider("n5"),
)

app = App(app_ui, None)
```

## Iterating functions

```{.python}
from shiny import App, render, ui

def my_slider(id):
    return ui.input_slider(id, "N", 0, 100, 20)

ids = ["n1", "n2", "n3", "n4", "n5"]

app_ui = ui.page_fluid(
    [my_slider(x) for x in ids]
)

app = App(app_ui, None)
```

## Iterating across two lists

```{.python}
from shiny import App, render, ui

def my_slider(id, label):
    return ui.input_slider(id, label + "Number", 0, 100, 20)

numbers = ["n1", "n2", "n3", "n4", "n5", "n6"]
labels = ["First", "Second", "Third", "Fourth", "Fifth", "Sixth"]

app_ui = ui.page_fluid(
    [my_slider(x, y) for x, y in zip(numbers, labels)]
)

app = App(app_ui, None)
```

## Benefits of functions
- Defines the the logic in one place
- First step on the abstraction ladder
- Clarifies how components interact with each other


## Your turn

Go to [exercises/13-ui-functions](../exercises/13-ui-functions.html) or run problems `5.1` and `5.2` in `apps/problem-sets/exercises/5-workflows`.

## Separate Reactive and Non-reactive logic

- Most Shiny app code is non-reactive
    - Drawing plots
    - Summarizing data
    - Interacting with databases
- It's fine to include this code inside reactive functions
- As your app grows you should separate them

## Reactivity makes everything harder
- Reactive context makes them inherently more difficult
    - Harder to debug
    - Harder to test
    - Harder to document
    - Harder to reason about

## Pull logic out of the reactive context
- Non-reactive functions are familiar and predictable
- You can call them in a notebook
- You can write unit tests 
- Makes your reactive code much clearer
- You can reuse them in other contexts

## Your turn

Go to [exercises/14-extract-functions](../exercises/13-extract-functions.html) or run problem `5.3` in `apps/problem-sets/exercises/5-workflows`.


## Modules
- Not going to teach them, but you should know about them
- Used when you want a function with both UI and Server components
- Allows you to package and re-use parts of your application
- Great for working with teams of developers
- Essential for large applications

# Question & Answer